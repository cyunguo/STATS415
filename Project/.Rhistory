knitr::opts_chunk$set(echo = TRUE)
data=read.csv("/Users/cyunguo/Desktop/Video_Games_Sales_as_at_22_Dec_2016.csv")
data=na.omit(data)
#summary(data$Global_Sales)
data$User_Score <- as.numeric(data$User_Score)
data$Critic_Score <- as.numeric(data$Critic_Score)
mod1 <- lm(Global_Sales ~ . - NA_Sales - EU_Sales - JP_Sales - Other_Sales - Global_Sales - Name - Publisher - Developer - Rating - Year_of_Release - Platform, data = trainData)
set.seed(12345)
trainid = sample(1:nrow(data), size = trunc(nrow(data) * 0.8))
trainData = data[trainid,]
testData = data[-trainid,]
trainx = model.matrix(Global_Sales ~ . - NA_Sales - EU_Sales - JP_Sales - Other_Sales - Global_Sales - Name-Publisher-Year_of_Release - Developer - Rating, data = trainData)[, -1]
trainy = trainData$Global_Sales
testx = model.matrix(Global_Sales ~ . - NA_Sales - EU_Sales - JP_Sales - Other_Sales - Global_Sales - Name-Publisher-Year_of_Release - Developer - Rating, data = testData)[, -1]
testy = testData$Global_Sales
data$User_Score <- as.numeric(data$User_Score)
data$Critic_Score <- as.numeric(data$Critic_Score)
mod1 <- lm(Global_Sales ~ . - NA_Sales - EU_Sales - JP_Sales - Other_Sales - Global_Sales - Name - Publisher - Developer - Rating - Year_of_Release - Platform, data = trainData)
summary(mod1)
plot(mod1)
knitr::opts_chunk$set(echo = TRUE)
est.t = as.numeric(fitdistr(NYSE_garchest11$residuals[-1],"t")$estimate)
library(MASS)
est.t = as.numeric(fitdistr(NYSE_garchest11$residuals[-1],"t")$estimate)
library(tseries)
X = read.csv("/Users/cyunguo/Desktop/2018WN/STATS509/hw/hw10/NYA-2015-2017.csv",header=TRUE)
NYSE_lret = diff(log(X$Adj.Close))
NYSE_lret.ts <- ts(data=NYSE_lret,start=c(2015,1),frequency=252,names=c('logret'))
NYSE_garchest11 = garch(NYSE_lret.ts, order = c(1, 1), coef = NULL, itmax = 200, eps = NULL, grad = c("analytic"))
summary(NYSE_garchest11)
u = predict(NYSE_garchest11)
plot(NYSE_lret.ts,type='l',xlab='Time',ylab='NYSE Log Returns',main='Plot of log returns')
lines(u[,2],lwd=2,lty=1,col='blue')
lines(u[,1],lwd=2,lty=1,col='blue')
plot(NYSE_garchest11$residuals,main='Plot of residuals')
par(mar=c(4, 4, 0.5, 0.5))
plot(NYSE_garchest11)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tseries)
X = read.csv("/Users/Samobao/Desktop/NYA-2015-2017.csv",header=TRUE)
library(tseries)
X = read.csv("/Users/cyunguo/Desktop/2018WN/STATS509/hw/hw10/NYA-2015-2017.csv",header=TRUE)
NYSE_lret = diff(log(X$Adj.Close))
NYSE_lret.ts <- ts(data=NYSE_lret,start=c(2015,1),frequency=252,names=c('logret'))
garchest <- garch(NYSE_lret.ts, order = c(1, 1), coef = NULL, itmax = 200, eps = NULL, grad = c('analytic'))
summary(garchest)
plot(garchest)
u = predict(garchest)
plot(NYSE_lret.ts,type='l',xlab='Time',ylab='NYSE Log Returns',main='Plot of log returns and +/- estimated std. deviations')
lines(u[,2],lwd=2,lty=1,col='blue')
lines(u[,1],lwd=2,lty=1,col='blue')
legend(2015,.06, c('Log Returns',"+/- sigma"), lty=c(1,1),lwd=c(1,2),col=c("black","blue"), bg="gray90")
plot(garchest$residuals,main='Plot of residuals',ylab='residuals')
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
pred = predict(NYSE_garchest)
data=read.csv("/Users/cyunguo/Desktop/Video_Games_Sales_as_at_22_Dec_2016.csv")
data=na.omit(data)
#summary(data$Global_Sales)
%split data
data=read.csv("/Users/cyunguo/Desktop/Video_Games_Sales_as_at_22_Dec_2016.csv")
data=na.omit(data)
#summary(data$Global_Sales)
#split data
set.seed(12345)
trainid = sample(1:nrow(data), size = trunc(nrow(data) * 0.8))
trainData = data[trainid,]
testData = data[-trainid,]
trainx = model.matrix(Global_Sales ~ . - NA_Sales - EU_Sales - JP_Sales - Other_Sales - Global_Sales - Name-Publisher-Year_of_Release - Developer - Rating, data = trainData)[, -1]
trainy = trainData$Global_Sales
testx = model.matrix(Global_Sales ~ . - NA_Sales - EU_Sales - JP_Sales - Other_Sales - Global_Sales - Name-Publisher-Year_of_Release - Developer - Rating, data = testData)[, -1]
testy = testData$Global_Sales
mod4 <- lm(Global_Sales ~ . - NA_Sales - EU_Sales - JP_Sales - Other_Sales - Global_Sales - Name - Publisher - Developer - Rating - Year_of_Release - Platform - Critic_Score - Critic_Count, data = trainData)
mse <- function(model, y, data) {
yhat <- predict(model, data)
mean((y - yhat)^2)
}
train_mse = mse(mod4, trainData$Global_Sales, trainData)
test_mse = mse(mod4, testData$Global_Sales, testData)
#summary(data$Global_Sales)
#split data
set.seed(12345)
trainid = sample(1:nrow(data), size = trunc(nrow(data) * 0.8))
trainData = data[trainid,]
testData = data[-trainid,]
mod4 <- lm(Global_Sales ~ . - NA_Sales - EU_Sales - JP_Sales - Other_Sales - Global_Sales - Name - Publisher - Developer - Rating - Year_of_Release - Platform - Critic_Score - Critic_Count, data = trainData)
mse <- function(model, y, data) {
yhat <- predict(model, data)
mean((y - yhat)^2)
}
train_mse = mse(mod4, trainData$Global_Sales, trainData)
test_mse = mse(mod4, testData$Global_Sales, testData)
trainmse
train_mse
test_mse
test_mse = mse(mod4, testData$Global_Sales, testData)
test_mse = mse(mod4, testData$Global_Sales, testData)
testData = data[-trainid,]
test_mse = mse(mod4, testData$Global_Sales, testData)
yhat <- predict(mod4, testData)
fix(testData)
testData = data[-trainid,]
mod4 <- lm(Global_Sales ~ User_Score+ User_Count+Genre,.  data = trainData)
mod4 <- lm(Global_Sales ~ User_Score+ User_Count+Genre, data = trainData)
test_mse = mse(mod4, testData$Global_Sales, testData)
data$User_Score=as.numeric(ata$User_Score)
data$User_Score=as.numeric(data$User_Score)
trainData = data[trainid,]
testData = data[-trainid,]
mod4 <- lm(Global_Sales ~ (User_Score)+ User_Count+Genre, data = trainData)
test_mse = mse(mod4, testData$Global_Sales, testData)
test_mse
ncol(data)
knitr::opts_chunk$set(echo = TRUE)
data = read.csv("/Users/cyunguo/Desktop/Video_Games_Sales_as_at_22_Dec_2016.csv")
data = na.omit(data)
# All genre games global sale
action = data[data$Genre == "Action",]
actionsale = sum(action$Global_Sales)
#summary(adventure$Global_Sales)
actionmean = mean(action$Global_Sales)
adventure = data[data$Genre == "Adventure",]
adventuresale = sum(adventure$Global_Sales)
#summary(adventure$Global_Sales)
adventuremean = mean(adventure$Global_Sales)
fighting = data[data$Genre == "Fighting",]
fightingsale = sum(fighting$Global_Sales)
#summary(fighting$Global_Sales)
fightingmean = mean(fighting$Global_Sales)
misc = data[data$Genre == "Misc",]
miscsale = sum(misc$Global_Sales)
#summary(misc$Global_Sales)
miscmean = mean(misc$Global_Sales)
platform = data[data$Genre == "Platform",]
platformsale = sum(platform$Global_Sales)
#summary(platform$Global_Sales)
platformmean = mean(platform$Global_Sales)
puzzle = data[data$Genre == "Puzzle",]
puzzlesale = sum(puzzle$Global_Sales)
#summary(puzzle$Global_Sales)
puzzlemean = mean(puzzle$Global_Sales)
racing = data[data$Genre == "Racing",]
racingsale = sum(racing$Global_Sales)
#summary(racing$Global_Sales)
racingmean = mean(racing$Global_Sales)
rpg = data[data$Genre == "Role-Playing",]
rpgsale = sum(rpg$Global_Sales)
#summary(rpg$Global_Sales)
rpgmean = mean(rpg$Global_Sales)
shooter = data[data$Genre == "Shooter",]
shootersale = sum(shooter$Global_Sales)
#summary(shooter$Global_Sales)
shootermean = mean(shooter$Global_Sales)
simulation = data[data$Genre == "Simulation",]
simulationsale = sum(simulation$Global_Sales)
#summary(simulation$Global_Sales)
simulationmean = mean(simulation$Global_Sales)
sports = data[data$Genre == "Sports",]
sportsale = sum(sports$Global_Sales)
#summary(sports$Global_Sales)
sportmean = mean(sports$Global_Sales)
strategy = data[data$Genre == "Strategy",]
strategysale = sum(strategy$Global_Sales)
#summary(strategy$Global_Sales)
strategymean = mean(strategy$Global_Sales)
Global_Sales_ALL = c(actionsale, adventuresale, fightingsale, miscsale, platformsale, puzzlesale, racingsale, rpgsale, shootersale, simulationsale, sportsale, strategysale)
Global_Sales_MEAN = c(actionmean, adventuremean, fightingmean, miscmean, platformmean, puzzlemean, racingmean, rpgmean, shootermean, simulationmean, sportmean, strategymean)
barplot(height = c(Global_Sales_ALL[1], Global_Sales_ALL[11], Global_Sales_ALL[9], Global_Sales_ALL[8], Global_Sales_ALL[7], Global_Sales_ALL[5], Global_Sales_ALL[4], Global_Sales_ALL[3], Global_Sales_ALL[10], Global_Sales_ALL[2], Global_Sales_ALL[6], Global_Sales_ALL[12]),names = c("action", "sport", "shoot", "rpg", "race", "platf", "misc", "fight", "sim", "adven", "puzz", "strat"),main="Global sales vs. Genre",cex.axis = 1.5,cex.lab = 1.5,cex.main = 2)
barplot(height = c(Global_Sales_MEAN[1], Global_Sales_MEAN[11], Global_Sales_MEAN[9], Global_Sales_MEAN[8], Global_Sales_MEAN[7], Global_Sales_MEAN[5], Global_Sales_MEAN[4], Global_Sales_MEAN[3], Global_Sales_MEAN[10], Global_Sales_MEAN[2], Global_Sales_MEAN[6], Global_Sales_MEAN[12]),names = c("action", "sport", "shoot", "rpg", "race", "platf", "misc", "fight", "sim", "adven", "puzz", "strat"),main="Mean Global sales vs. Genre",cex.axis = 1.5,cex.lab = 1.5,cex.main = 2)
data = na.omit(data)
# All genre games global sale
action = data[data$Genre == "Action",]
actionsale = sum(action$Global_Sales)
#summary(adventure$Global_Sales)
actionmean = mean(action$Global_Sales)
adventure = data[data$Genre == "Adventure",]
adventuresale = sum(adventure$Global_Sales)
#summary(adventure$Global_Sales)
adventuremean = mean(adventure$Global_Sales)
fighting = data[data$Genre == "Fighting",]
fightingsale = sum(fighting$Global_Sales)
#summary(fighting$Global_Sales)
fightingmean = mean(fighting$Global_Sales)
misc = data[data$Genre == "Misc",]
miscsale = sum(misc$Global_Sales)
#summary(misc$Global_Sales)
miscmean = mean(misc$Global_Sales)
platform = data[data$Genre == "Platform",]
platformsale = sum(platform$Global_Sales)
#summary(platform$Global_Sales)
platformmean = mean(platform$Global_Sales)
puzzle = data[data$Genre == "Puzzle",]
puzzlesale = sum(puzzle$Global_Sales)
#summary(puzzle$Global_Sales)
puzzlemean = mean(puzzle$Global_Sales)
racing = data[data$Genre == "Racing",]
racingsale = sum(racing$Global_Sales)
#summary(racing$Global_Sales)
racingmean = mean(racing$Global_Sales)
rpg = data[data$Genre == "Role-Playing",]
rpgsale = sum(rpg$Global_Sales)
#summary(rpg$Global_Sales)
rpgmean = mean(rpg$Global_Sales)
shooter = data[data$Genre == "Shooter",]
shootersale = sum(shooter$Global_Sales)
#summary(shooter$Global_Sales)
shootermean = mean(shooter$Global_Sales)
simulation = data[data$Genre == "Simulation",]
simulationsale = sum(simulation$Global_Sales)
#summary(simulation$Global_Sales)
simulationmean = mean(simulation$Global_Sales)
sports = data[data$Genre == "Sports",]
sportsale = sum(sports$Global_Sales)
#summary(sports$Global_Sales)
sportmean = mean(sports$Global_Sales)
strategy = data[data$Genre == "Strategy",]
strategysale = sum(strategy$Global_Sales)
#summary(strategy$Global_Sales)
strategymean = mean(strategy$Global_Sales)
Global_Sales_ALL = c(actionsale, adventuresale, fightingsale, miscsale, platformsale, puzzlesale, racingsale, rpgsale, shootersale, simulationsale, sportsale, strategysale)
Global_Sales_MEAN = c(actionmean, adventuremean, fightingmean, miscmean, platformmean, puzzlemean, racingmean, rpgmean, shootermean, simulationmean, sportmean, strategymean)
barplot(height = c(Global_Sales_ALL[1], Global_Sales_ALL[11], Global_Sales_ALL[9], Global_Sales_ALL[8], Global_Sales_ALL[7], Global_Sales_ALL[5], Global_Sales_ALL[4], Global_Sales_ALL[3], Global_Sales_ALL[10], Global_Sales_ALL[2], Global_Sales_ALL[6], Global_Sales_ALL[12]),names = c("action", "sport", "shoot", "rpg", "race", "platf", "misc", "fight", "sim", "adven", "puzz", "strat"),main="Global sales vs. Genre",cex.axis = 1.5,cex.lab = 1.5,cex.main = 2)
barplot(height = c(Global_Sales_MEAN[1], Global_Sales_MEAN[11], Global_Sales_MEAN[9], Global_Sales_MEAN[8], Global_Sales_MEAN[7], Global_Sales_MEAN[5], Global_Sales_MEAN[4], Global_Sales_MEAN[3], Global_Sales_MEAN[10], Global_Sales_MEAN[2], Global_Sales_MEAN[6], Global_Sales_MEAN[12]),names = c("action", "sport", "shoot", "rpg", "race", "platf", "misc", "fight", "sim", "adven", "puzz", "strat"),main="Mean Global sales vs. Genre",cex.axis = 1.5,cex.lab = 1.5,cex.main = 2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(width=3, height=3)
hc.clusters = cutree(hc_complete, 3)
d = as.dist(matrix(c(0,0.3,0.4,0.7,0.3,0,0.5,0.8,0.4,0.5,0,0.45,0.7,0.8,0.45,0), nrow=4))
par(pin=c(2,1.5))
par(mfrow=c(1,2))
plot(hclust(d, method="complete"),main="Complete Linkage",xlab="",sub="",cex=0.5)
plot(hclust(d, method = "single"),main="Single Linkage", xlab="",sub="",cex=0.5)
attach(USArrests)
par(pin=c(5,2))
hc_complete = hclust(dist(USArrests, method = "euclidean"), method="complete")
plot(hc_complete,main="Complete Linkage",xlab="", sub="",ylab="",cex = 0.6)
library(cluster)
hc.clusters = cutree(hc_complete, 3)
hc.clusters = cutree(hc_complete, 3)
set.seed(1111)
km.out = kmeans(USArrests, 3, nstart = 50)
km.clusters=km.out$cluster
table(km.clusters, hc.clusters)
d = as.dist(matrix(c(0,0.3,0.4,0.7,0.3,0,0.5,0.8,0.4,0.5,0,0.45,0.7,0.8,0.45,0), nrow=4))
par(pin=c(2,1.5))
par(mfrow=c(1,2))
plot(hclust(d, method="complete"),main="Complete Linkage",xlab="",sub="",cex=0.5)
plot(hclust(d, method = "single"),main="Single Linkage", xlab="",sub="",cex=0.5)
par(pin=c(2,1.5))
plot(hclust(d, method = "complete"), labels = c(2,1,4,3),xlab="",sub="",cex=0.5)
attach(USArrests)
par(pin=c(5,2))
hc_complete = hclust(dist(USArrests, method = "euclidean"), method="complete")
plot(hc_complete,main="Complete Linkage",xlab="", sub="",ylab="",cex = 0.6)
library(cluster)
hc.clusters = cutree(hc_complete, 3)
clust_1 <- hc.clusters[hc.clusters == 1]
clust_2 <- hc.clusters[hc.clusters == 2]
clust_3 <- hc.clusters[hc.clusters == 3]
names(clust_1)
names(clust_2)
names(clust_3)
par(pin=c(5,1.5))
plot(silhouette(hc.clusters,dist(USArrests, method = "euclidean")), main = "Silhouette plot from hierarchical clustering")
par(pin=c(5,2))
hc_single = hclust(dist(USArrests, method = "euclidean"), method="single")
plot(hc_single,main="Single Linkage",xlab="", sub="",ylab="",cex = 0.5)
hc.clusters2 = cutree(hc_single, 3)
clust2_1 <- hc.clusters2[hc.clusters2 == 1]
clust2_2 <- hc.clusters2[hc.clusters2 == 2]
clust2_3 <- hc.clusters2[hc.clusters2 == 3]
names(clust2_1)
names(clust2_2)
names(clust2_3)
par(pin=c(5,1.5))
plot(silhouette(hc.clusters2,dist(USArrests, method = "euclidean")), main = "Silhouette plot from hierarchical clustering")
set.seed(1111)
km.out = kmeans(USArrests, 3, nstart = 50)
km.clusters=km.out$cluster
table(km.clusters, hc.clusters)
km.clusters1 = km.out$cluster[km.out$cluster == 1]
km.clusters2 = km.out$cluster[km.out$cluster == 2]
km.clusters3 = km.out$cluster[km.out$cluster == 3]
names(km.clusters1)
names(km.clusters2)
names(km.clusters3)
par(pin=c(5,1.5))
plot(silhouette(km.out$cluster,dist(USArrests)),main="Silhouette plot from K-means")
set.seed(1111)
sd.arrests <- scale(USArrests)
hcsd_complete <- hclust(dist(sd.arrests), method="complete")
par(pin=c(5,1.5))
plot(hcsd_complete, main="Hierarchical Clustering with Scaled Variables Complete Linkage",xlab="",ylab="",sub="",cex = 0.5)
hcsd.clusters = cutree(hcsd_complete, 3)
clustsd_1 <- hcsd.clusters[hcsd.clusters == 1]
clustsd_2 <- hcsd.clusters[hcsd.clusters == 2]
clustsd_3 <- hcsd.clusters[hcsd.clusters == 3]
names(clustsd_1)
names(clustsd_2)
names(clustsd_3)
par(pin=c(5,1.5))
plot(silhouette(hcsd.clusters,dist(USArrests, method = "euclidean")), main = "Silhouette plot from hierarchical clustering")
par(pin=c(5,1.5))
plot(silhouette(hcsd.clusters,dist(USArrests)), main = "Silhouette plot from hierarchical clustering")
par(pin=c(5,1.5))
plot(silhouette(hcsd.clusters,dist(USArrests)), main = "Silhouette plot from hierarchical clustering")
par(pin=c(5,1.5))
plot(silhouette(hcsd.clusters,dist(sd.arrests)), main = "Silhouette plot from hierarchical clustering")
data = read.csv("/Users/cyunguo/Desktop/Video_Games_Sales_as_at_22_Dec_2016.csv")
data=read.csv("/Users/cyunguo/Desktop/Video_Games_Sales_as_at_22_Dec_2016.csv")
data=na.omit(data)
#summary(data$Global_Sales)
data$User_Score=as.numeric(data$User_Score)
boxplot(User_Score)
boxplot(data$User_Score)
boxplot(data$Global_Sales)
boxplot(data$Global_Sales, main = "Global Sales Box Plot")
boxplot(data$User_Score, main = "Use_Score Box Plot")
boxplot(data$User_Score, main = "User_Score Box Plot")
boxplot(data$User_Count, main = "User_Count Box Plot")
boxplot(data$Critic_Score, main = "Critic_Score Box Plot")
boxplot(data$Critic_Count, main = "Critic_Count Box Plot")
knitr::opts_chunk$set(echo = TRUE)
data=read.csv("/Users/cyunguo/Desktop/Video_Games_Sales_as_at_22_Dec_2016.csv")
data=na.omit(data)
#summary(data$Global_Sales)
data$User_Score=as.numeric(data$User_Score)
set.seed(12345)
trainid = sample(1:nrow(data), size = trunc(nrow(data) * 0.8))
trainData = data[trainid,]
testData = data[-trainid,]
trainx = model.matrix(Global_Sales ~ . - NA_Sales - EU_Sales - JP_Sales - Other_Sales - Global_Sales - Name-Publisher-Year_of_Release - Developer - Rating, data = trainData)[, -1]
trainy = trainData$Global_Sales
testx = model.matrix(Global_Sales ~ . - NA_Sales - EU_Sales - JP_Sales - Other_Sales - Global_Sales - Name-Publisher-Year_of_Release - Developer - Rating, data = testData)[, -1]
testy = testData$Global_Sales
data$User_Score <- as.numeric(data$User_Score)
data$Critic_Score <- as.numeric(data$Critic_Score)
mse <- function(model, y, data) {
yhat <- predict(model, data)
mean((y - yhat)^2)
}
library(ISLR)
hitPCA <- prcomp(x=trainx, center = T, scale = F)
plot(hitPCA)
trainx.centered <- apply(trainx, 2, function(x) x - mean(x))
hitEigen <- eigen(var(trainx.centered))
cbind("eigen" = hitEigen$vectors[, 1], "prcomp" = hitPCA$rotation[, 1])
summary(hitPCA)$x[,1]
mod9 <- lm(trainData$Global_Sales~hitPCA$x[,1])
library(pls)
install.packages("pls")
knitr::opts_chunk$set(echo = TRUE)
library(pls)
set.seed(1)
hitPCR <- pcr(Global_Sales~Genre+Critic_Score+Critic_Count+User_Score+User_Count, data = trainData, subset = trainx, scale = TRUE, validation = "CV")
summary(hitPCR)
validationplot(hitPCR, val.type = "MSEP", legendpos = "topright")
validationplot(hitPCR, val.type = "MSEP", legendpos = "topright")
test_x = model.matrix(Global_Sales ~Critic_Score+Critic_Count+User_Score+User_Count+Genre, data = testData)[, -1]
test_y = testData$Global_Sales
hitPCR.pred <- predict(hitPCR, test_x, ncomp = 4)
PCRTestMSE <- mean((hitPCR.pred -test_y)^2)
PCRTestMSE
test_x = model.matrix(Global_Sales ~Critic_Score+Critic_Count+User_Score+User_Count+Genre, data = testData)[, -1]
test_y = testData$Global_Sales
hitPCR.pred <- predict(hitPCR, test_x, ncomp = 5)
PCRTestMSE <- mean((hitPCR.pred -test_y)^2)
PCRTestMSE
test_x = model.matrix(Global_Sales ~Critic_Score+Critic_Count+User_Score+User_Count+Genre, data = testData)[, -1]
test_y = testData$Global_Sales
hitPCR.pred <- predict(hitPCR, test_x, ncomp = 16)
PCRTestMSE <- mean((hitPCR.pred -test_y)^2)
PCRTestMSE
library(pls)
set.seed(1)
hitPCR <- pcr(Global_Sales~Critic_Score+Critic_Count+User_Score+User_Count, data = trainData, subset = trainx, scale = TRUE, validation = "CV")
summary(hitPCR)
validationplot(hitPCR, val.type = "MSEP", legendpos = "topright")
train_x = model.matrix(Global_Sales ~Critic_Score+Critic_Count+User_Score+User_Count , data = trainData)[, -1]
train_y = trainData$Global_Sales
test_x = model.matrix(Global_Sales ~Critic_Score+Critic_Count+User_Score+User_Count, data = testData)[, -1]
test_y = testData$Global_Sales
hitPCR.pred <- predict(hitPCR, test_x, ncomp = 16)
hitPCR.pred <- predict(hitPCR, test_x, ncomp = 2)
PCRTestMSE <- mean((hitPCR.pred -test_y)^2)
PCRTestMSE
data=read.csv("/Users/cyunguo/Desktop/Video_Games_Sales_as_at_22_Dec_2016.csv")
data=read.csv("/Users/cyunguo/Desktop/Video_Games_Sales_as_at_22_Dec_2016.csv")
data[Year_of_Release >=1990 & Year_of_Release <=2000,]
data[data$Year_of_Release >=1990 & data$Year_of_Release <=2000,]
