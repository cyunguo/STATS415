quantv = (1/N)*seq(.5,N-.5,1)
qqplot(sort(Nasdaq_SP400_LR[,1]),qt(quantv,nuest),main='Nasdaq-QQ plot for t-dist')
abline(lm(qt(c(.25,.75),est.Nasdaq[3])~quantile(Nasdaq_SP400_LR[,1],c(.25,.75))))
qqplot(sort(Nasdaq_SP400_LR[,2]),qt(quantv,nuest),main='SP400-QQ plot for t-dist')
abline(lm(qt(c(.25,.75),est.SP400[3])~quantile(Nasdaq_SP400_LR[,2],c(.25,.75))))
est.Nasdaq[2] = est.Nasdaq[2]*sqrt(est.Nasdaq[3]/(est.Nasdaq[3]-2))
est.SP400[2] = est.SP400[2]*sqrt(est.SP400[3]/(est.SP400[3]-2))
data_3 = cbind(pstd(Nasdaq_SP400_LR[,1],mean=est.Nasdaq[1],sd=est.Nasdaq[2],nu=est.Nasdaq[3]),
pstd(Nasdaq_SP400_LR[,2],mean=est.SP400[1],sd=est.SP400[2],nu=est.SP400[3]))
u1_t = data_3[,1]
u2_t = data_3[,2]
dem_t = pempiricalCopula(u1_t,u2_t)
contour(dem_t$x,dem_t$y,dem_t$z,main="Empirical-t",col='blue',lty=1,lwd=2,nlevel=20)
rmt_dis = rmt(n = 100000, mean = muest, lambdaest, df = nuest)
data_4 = cbind(pstd(rmt_dis[,1],mean=est.Nasdaq[1],sd=est.Nasdaq[2],nu=est.Nasdaq[3]),
pstd(rmt_dis[,2],mean=est.SP400[1],sd=est.SP400[2],nu=est.SP400[3]))
demt = pempiricalCopula(data_4[,1],data_4[,2])
contour(demt$x,demt$y,demt$z,main='t',col='red',lty=2,lwd=2,add=TRUE,nlevel=20)
library(fGarch)
library(MASS)
library(mnormt)
df = seq(2.5,8,.01)
n = length(df)
loglikt = rep(0,n)
for(i in 1:n) {
fit = cov.trob(Nasdaq_SP400_LR,nu=df[i])
mu = as.vector(fit$center)
sigma =matrix(fit$cov,nrow=4)
loglikt[i] = sum(log(dmt(Nasdaq_SP400_LR,mean=fit$center,
S=fit$cov,df=df[i])))
}
plot(df,loglikt,xlab='nu',ylab='Profile-likelihood function')
lambdadif=(logliket_max[which.max(loglikt)]-logliket_max)
nu_lb=min(df[lambdadif>.5*pchisq(.05,1,ncp=0,lower.tail = FALSE)])-.01
nu_up=max(df[lambdadif>.5*pchisq(.05,1,ncp=0,lower.tail = FALSE)])-.01
nuest = df[which.max(loglikt)]
nuest
fitfinal = cov.trob(Nasdaq_SP400_LR,nu=nuest)
muest = fitfinal$center
lambdaest = fitfinal$cov
muest
lambdaest
N = length(Nasdaq_SP400_LR[,1])
est.Nasdaq = as.numeric(c(muest[1],sqrt(lambdaest[1,1]),nuest))
est.SP400 = as.numeric(c(muest[2],sqrt(lambdaest[2,2]),nuest))
est.Nasdaq
est.SP400
quantv = (1/N)*seq(.5,N-.5,1)
qqplot(sort(Nasdaq_SP400_LR[,1]),qt(quantv,nuest),main='Nasdaq-QQ plot for t-dist')
abline(lm(qt(c(.25,.75),est.Nasdaq[3])~quantile(Nasdaq_SP400_LR[,1],c(.25,.75))))
qqplot(sort(Nasdaq_SP400_LR[,2]),qt(quantv,nuest),main='SP400-QQ plot for t-dist')
abline(lm(qt(c(.25,.75),est.SP400[3])~quantile(Nasdaq_SP400_LR[,2],c(.25,.75))))
est.Nasdaq[2] = est.Nasdaq[2]*sqrt(est.Nasdaq[3]/(est.Nasdaq[3]-2))
est.SP400[2] = est.SP400[2]*sqrt(est.SP400[3]/(est.SP400[3]-2))
data_3 = cbind(pstd(Nasdaq_SP400_LR[,1],mean=est.Nasdaq[1],sd=est.Nasdaq[2],nu=est.Nasdaq[3]),
pstd(Nasdaq_SP400_LR[,2],mean=est.SP400[1],sd=est.SP400[2],nu=est.SP400[3]))
u1_t = data_3[,1]
u2_t = data_3[,2]
dem_t = pempiricalCopula(u1_t,u2_t)
contour(dem_t$x,dem_t$y,dem_t$z,main="Empirical-t",col='blue',lty=1,lwd=2,nlevel=20)
rmt_dis = rmt(n = 100000, mean = muest, lambdaest, df = nuest)
data_4 = cbind(pstd(rmt_dis[,1],mean=est.Nasdaq[1],sd=est.Nasdaq[2],nu=est.Nasdaq[3]),
pstd(rmt_dis[,2],mean=est.SP400[1],sd=est.SP400[2],nu=est.SP400[3]))
demt = pempiricalCopula(data_4[,1],data_4[,2])
contour(demt$x,demt$y,demt$z,main='t',col='red',lty=2,lwd=2,add=TRUE,nlevel=20)
library(fGarch)
library(MASS)
library(mnormt)
df = seq(2.5,8,.01)
n = length(df)
loglikt = rep(0,n)
for(i in 1:n) {
fit = cov.trob(Nasdaq_SP400_LR,nu=df[i])
mu = as.vector(fit$center)
sigma =matrix(fit$cov,nrow=4)
loglikt[i] = sum(log(dmt(Nasdaq_SP400_LR,mean=fit$center,
S=fit$cov,df=df[i])))
}
plot(df,loglikt,xlab='nu',ylab='Profile-likelihood function')
lambdadif=(loglikt[which.max(loglikt)]-loglikt)
nu_lb=min(df[lambdadif>.5*pchisq(.05,1,ncp=0,lower.tail = FALSE)])-.01
nu_up=max(df[lambdadif>.5*pchisq(.05,1,ncp=0,lower.tail = FALSE)])-.01
nuest = df[which.max(loglikt)]
nuest
fitfinal = cov.trob(Nasdaq_SP400_LR,nu=nuest)
muest = fitfinal$center
lambdaest = fitfinal$cov
muest
lambdaest
N = length(Nasdaq_SP400_LR[,1])
est.Nasdaq = as.numeric(c(muest[1],sqrt(lambdaest[1,1]),nuest))
est.SP400 = as.numeric(c(muest[2],sqrt(lambdaest[2,2]),nuest))
est.Nasdaq
est.SP400
quantv = (1/N)*seq(.5,N-.5,1)
qqplot(sort(Nasdaq_SP400_LR[,1]),qt(quantv,nuest),main='Nasdaq-QQ plot for t-dist')
abline(lm(qt(c(.25,.75),est.Nasdaq[3])~quantile(Nasdaq_SP400_LR[,1],c(.25,.75))))
qqplot(sort(Nasdaq_SP400_LR[,2]),qt(quantv,nuest),main='SP400-QQ plot for t-dist')
abline(lm(qt(c(.25,.75),est.SP400[3])~quantile(Nasdaq_SP400_LR[,2],c(.25,.75))))
est.Nasdaq[2] = est.Nasdaq[2]*sqrt(est.Nasdaq[3]/(est.Nasdaq[3]-2))
est.SP400[2] = est.SP400[2]*sqrt(est.SP400[3]/(est.SP400[3]-2))
data_3 = cbind(pstd(Nasdaq_SP400_LR[,1],mean=est.Nasdaq[1],sd=est.Nasdaq[2],nu=est.Nasdaq[3]),
pstd(Nasdaq_SP400_LR[,2],mean=est.SP400[1],sd=est.SP400[2],nu=est.SP400[3]))
u1_t = data_3[,1]
u2_t = data_3[,2]
dem_t = pempiricalCopula(u1_t,u2_t)
contour(dem_t$x,dem_t$y,dem_t$z,main="Empirical-t",col='blue',lty=1,lwd=2,nlevel=20)
rmt_dis = rmt(n = 100000, mean = muest, lambdaest, df = nuest)
data_4 = cbind(pstd(rmt_dis[,1],mean=est.Nasdaq[1],sd=est.Nasdaq[2],nu=est.Nasdaq[3]),
pstd(rmt_dis[,2],mean=est.SP400[1],sd=est.SP400[2],nu=est.SP400[3]))
demt = pempiricalCopula(data_4[,1],data_4[,2])
contour(demt$x,demt$y,demt$z,main='t',col='red',lty=2,lwd=2,add=TRUE,nlevel=20)
library(ISLR)
data("Auto")
mpg01 = rep(0,length(Auto$mpg))
median_mpg = median(Auto$mpg)
for (i in 1:length(Auto$mpg)){
if (Auto$mpg[i] > median_mpg)
mpg01[i] = 1
}
mpg01=as.factor(mpg01)
auto_data = data.frame(Auto,mpg01)
par(mfrow=c(2,2))
boxplot(cylinders ~ mpg01, data = data_Auto, xlab = 'mpg01', ylab = 'cylinders')
par(mfrow=c(2,2))
boxplot(cylinders ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'cylinders')
boxplot(displacement ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'displacement')
boxplot(horsepower ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'horsepower')
boxplot(weight ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'weight')
plot(mpg01 ~ acceleration, data = auto_data)
boxplot(acceleration ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'acceleration')
boxplot(year ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'year')
boxplot(origin ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'origin')
par(mfrow=c(2,2))
boxplot(cylinders ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'cylinders')
boxplot(displacement ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'displacement')
boxplot(horsepower ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'horsepower')
boxplot(weight ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'weight')
boxplot(acceleration ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'acceleration')
boxplot(year ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'year')
boxplot(origin ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'origin')
par(mfrow=c(2,2))
plot(mpg01~cylinders, data = auto_data)
boxplot(cylinders ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'cylinders')
boxplot(displacement ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'displacement')
boxplot(horsepower ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'horsepower')
boxplot(weight ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'weight')
boxplot(acceleration ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'acceleration')
boxplot(year ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'year')
boxplot(origin ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'origin')
set.seed(12345)
auto_mpg0=which(auto_data$mpg01==0)
auto_mpg1=which(auto_data$mpg01==1)
train_id = c(sample(auto_mpg0,size=floor(0.8*length(auto_mpg0))),sample(auto_mpg1,size=floor(0.8*length(auto_mpg1))))
auto_train = auto_data[train_id,]
auto_test = auto_data[-train_id,]
auto_lda = lda(mpg01 ~ displacement+acceleration+horsepower+weight, data = auto_train)
auto_lda_train_pred = predict(auto_lda, auto_train)$class
auto_lda_test_pred = predict(auto_lda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
lda_train_err = calc_class_err(predicted = auto_lda_train_pred, actual = auto_train$mpg01)
lda_train_err
lda_test_err = calc_class_err(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
lda_test_err
auto_lda = lda(mpg01 ~displacement+acceleration+horsepower+weight, data = auto_train)
auto_lda_train_pred = predict(auto_lda, auto_train)$class
auto_lda_test_pred = predict(auto_lda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
lda_train_err = calc_class_err(predicted = auto_lda_train_pred, actual = auto_train$mpg01)
lda_train_err
lda_test_err = calc_class_err(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
lda_test_err
auto_lda = lda(mpg01~displacement+acceleration+horsepower+weight,
data = auto_train)
auto_lda_train_pred = predict(auto_lda, auto_train)$class
auto_lda_test_pred = predict(auto_lda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
lda_train_err = calc_class_err(predicted = auto_lda_train_pred, actual = auto_train$mpg01)
lda_train_err
lda_test_err = calc_class_err(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
lda_test_err
auto_lda = lda(mpg01 ~ ., data = auto_train)
auto_lda = lda(mpg01 ~ acceleration+displacement+horsepower+weight, data = auto_train)
auto_lda_train_pred = predict(auto_lda, auto_train)$class
auto_lda_test_pred = predict(auto_lda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
lda_train_err = calc_class_err(predicted = auto_lda_train_pred, actual = auto_train$mpg01)
lda_train_err
lda_test_err = calc_class_err(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
lda_test_err
set.seed(12345)
auto_mpg0=which(auto_data$mpg01==0)
auto_mpg1=which(auto_data$mpg01==1)
#train_id = c(sample(auto_mpg0,size=floor(0.8*length(auto_mpg0))),sample(auto_mpg1,size=floor(0.8*length(auto_mpg1))))
train_id = sample(1:length(auto_data$mpg01), size = round(0.8*length(auto_data$mpg01)))
auto_train = auto_data[train_id,]
auto_test = auto_data[-train_id,]
auto_lda = lda(mpg01 ~ acceleration+displacement+horsepower+weight, data = auto_train)
auto_lda_train_pred = predict(auto_lda, auto_train)$class
auto_lda_test_pred = predict(auto_lda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
lda_train_err = calc_class_err(predicted = auto_lda_train_pred, actual = auto_train$mpg01)
lda_train_err
lda_test_err = calc_class_err(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
lda_test_err
set.seed(12345)
auto_mpg0=which(auto_data$mpg01==0)
auto_mpg1=which(auto_data$mpg01==1)
train_id = c(sample(auto_mpg0,size=trunc(0.80*length(auto_mpg0))),sample(auto_mpg1,size=trunc(0.8*length(auto_mpg1))))
#train_id = sample(1:length(auto_data$mpg01), size = round(0.8*length(auto_data$mpg01)))
auto_train = auto_data[train_id,]
auto_test = auto_data[-train_id,]
auto_lda = lda(mpg01 ~ acceleration+displacement+horsepower+weight, data = auto_train)
auto_lda_train_pred = predict(auto_lda, auto_train)$class
auto_lda_test_pred = predict(auto_lda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
lda_train_err = calc_class_err(predicted = auto_lda_train_pred, actual = auto_train$mpg01)
lda_train_err
lda_test_err = calc_class_err(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
lda_test_err
set.seed(12345)
auto_mpg0=which(auto_data$mpg01==0)
auto_mpg1=which(auto_data$mpg01==1)
train_id = c(sample(auto_mpg0,size=round(0.80*length(auto_mpg0))),sample(auto_mpg1,size=round(0.8*length(auto_mpg1))))
#train_id = sample(1:length(auto_data$mpg01), size = round(0.8*length(auto_data$mpg01)))
auto_train = auto_data[train_id,]
auto_test = auto_data[-train_id,]
auto_lda = lda(mpg01 ~ acceleration+displacement+horsepower+weight, data = auto_train)
auto_lda_train_pred = predict(auto_lda, auto_train)$class
auto_lda_test_pred = predict(auto_lda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
lda_train_err = calc_class_err(predicted = auto_lda_train_pred, actual = auto_train$mpg01)
lda_train_err
lda_test_err = calc_class_err(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
lda_test_err
set.seed(12345)
auto_mpg0=which(auto_data$mpg01==0)
auto_mpg1=which(auto_data$mpg01==1)
train_id = c(sample(auto_mpg0,size=trunc(0.80*length(auto_mpg0))),sample(auto_mpg1,size=trunc(0.8*length(auto_mpg1))))
#train_id = sample(1:length(auto_data$mpg01), size = round(0.8*length(auto_data$mpg01)))
auto_train = auto_data[train_id,]
auto_test = auto_data[-train_id,]
set.seed(12345)
auto_mpg0=which(auto_data$mpg01==0)
auto_mpg1=which(auto_data$mpg01==1)
train_id = c(sample(auto_mpg0,size=trunc(0.80*length(auto_mpg0))),sample(auto_mpg1,size=trunc(0.80*length(auto_mpg1))))
#train_id = sample(1:length(auto_data$mpg01), size = round(0.8*length(auto_data$mpg01)))
auto_train = auto_data[train_id,]
auto_test = auto_data[-train_id,]
auto_lda = lda(mpg01 ~ acceleration+displacement+horsepower+weight, data = auto_train)
auto_lda_train_pred = predict(auto_lda, auto_train)$class
auto_lda_test_pred = predict(auto_lda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
lda_train_err = calc_class_err(predicted = auto_lda_train_pred, actual = auto_train$mpg01)
lda_train_err
lda_test_err = calc_class_err(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
lda_test_err
plot(auto_train$displacement,auto_train$horsepower,
col = c("blue", "green")[auto_train$mpg01],
xlab = "Displacement", ylab = "Horsepower",
main = "True class vs Predicted class by LDA"
)
points(auto_train$displacement,auto_train$horsepower,
pch = c(2,3)[auto_lda_train_pred])
legend("bottomright", c("true_0","true_1","pred_0","pred_1"),
col=c("blue", "green", "black", "black"),
pch=c(1,1,2,3))
set.seed(12345)
auto_mpg0=which(auto_data$mpg01==0)
auto_mpg1=which(auto_data$mpg01==1)
train_id = c(sample(auto_mpg0,size=floor(0.80*length(auto_mpg0))),sample(auto_mpg1,size=floor(0.80*length(auto_mpg1))))
#train_id = sample(1:length(auto_data$mpg01), size = round(0.8*length(auto_data$mpg01)))
auto_train = auto_data[train_id,]
auto_test = auto_data[-train_id,]
auto_lda = lda(mpg01 ~ acceleration+displacement+horsepower+weight, data = auto_train)
auto_lda_train_pred = predict(auto_lda, auto_train)$class
auto_lda_test_pred = predict(auto_lda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
lda_train_err = calc_class_err(predicted = auto_lda_train_pred, actual = auto_train$mpg01)
lda_train_err
lda_test_err = calc_class_err(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
lda_test_err
plot(auto_train$displacement,auto_train$horsepower,
col = c("blue", "green")[auto_train$mpg01],
xlab = "Displacement", ylab = "Horsepower",
main = "True class vs Predicted class by LDA"
)
points(auto_train$displacement,auto_train$horsepower,
pch = c(2,3)[auto_lda_train_pred])
legend("bottomright", c("true_0","true_1","pred_0","pred_1"),
col=c("blue", "green", "black", "black"),
pch=c(1,1,2,3))
auto_qda = qda(mpg01 ~ acceleration+displacement+horsepower+weight, data = auto_train)
auto_qda_train_pred = predict(auto_qda, auto_train)$class
auto_qda_test_pred = predict(auto_qda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
qda_train_err = calc_class_err(predicted = auto_qda_train_pred, actual = auto_train$mpg01)
qda_train_err
qda_test_err = calc_class_err(predicted = auto_qda_test_pred, actual = auto_test$mpg01)
qda_test_err
plot(auto_train$displacement,auto_train$horsepower,
col = c("blue", "red")[auto_train$mpg01],
xlab = "Displacement", ylab = "Horsepower",
main = "True class vs Predicted class by LDA"
)
points(auto_train$displacement,auto_train$horsepower,
pch = c(2,3)[auto_lda_train_pred])
legend("bottomright", c("true_0","true_1","pred_0","pred_1"),
col=c("blue", "red", "black", "black"),
pch=c(1,1,2,3))
plot(auto_train$displacement,auto_train$horsepower,
col = c("blue", "red")[auto_train$mpg01],
xlab = "Displacement", ylab = "Horsepower",
main = "True class vs Predicted class by LDA"
)
points(auto_train$displacement,auto_train$horsepower,
pch = c(2,3)[auto_lda_train_pred])
legend("topleft", c("true_0","true_1","pred_0","pred_1"),
col=c("blue", "red", "black", "black"),
pch=c(1,1,2,3))
plot(auto_train$displacement,auto_train$horsepower,
col = c("blue", "red")[auto_train$mpg01],
xlab = "Displacement", ylab = "Horsepower",
main = "True class vs Predicted class by LDA"
)
points(auto_train$displacement,auto_train$horsepower,
pch = c(2,3)[auto_lda_train_pred])
legend("bottomright", c("true_0","true_1","pred_0","pred_1"),
col=c("blue", "red", "black", "black"),
pch=c(1,1,2,3))
plot(auto_train$displacement,auto_train$horsepower,
col = c("blue", "red")[auto_train$mpg01],
xlab = "Displacement", ylab = "Horsepower",
main = "True class vs Predicted class by QDA"
)
points(auto_train$displacement,auto_train$horsepower,
pch = c(2,3)[auto_qda_train_pred])
legend("bottomright", c("true_0","true_1","pred_0","pred_1"),
col=c("blue", "red", "black", "black"),
pch=c(1,1,2,3))
par(mfrow=c(2,2))
boxplot(cylinders ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'cylinders')
boxplot(displacement ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'displacement')
boxplot(horsepower ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'horsepower')
boxplot(weight ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'weight')
boxplot(acceleration ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'acceleration')
boxplot(year ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'year')
boxplot(origin ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'origin')
library(ISLR)
data("Auto")
mpg01 = rep(0,length(Auto$mpg))
median_mpg = median(Auto$mpg)
for (i in 1:length(Auto$mpg)){
if (Auto$mpg[i] > median_mpg)
mpg01[i] = 1
}
mpg01=as.factor(mpg01)
auto_data = data.frame(Auto,mpg01)
par(mfrow=c(2,2))
boxplot(cylinders ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'cylinders')
boxplot(displacement ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'displacement')
boxplot(horsepower ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'horsepower')
boxplot(weight ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'weight')
boxplot(acceleration ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'acceleration')
boxplot(year ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'year')
boxplot(origin ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'origin')
table(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
table(predicted = auto_qda_test_pred, actual = auto_test$mpg01)
pairs(auto_data[c(2:4,10)], col=c("blue", "green")[auto_data$mpg01], oma=c(4,4,6,12), pch=c(1,2)[auto_data$mpg01])
par(xpd=TRUE)
legend(0.85, 0.7, as.vector(unique(auto_data$mpg01)), col=c("blue", "green"), pch=1:2)
pairs(auto_data[c(5:8,10)], col=c("blue", "green")[auto_data$mpg01], pch=c(1,2)[auto_data$mpg01])
par(mfrow=c(2,2))
boxplot(cylinders ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'cylinders')
boxplot(displacement ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'displacement')
boxplot(horsepower ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'horsepower')
boxplot(weight ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'weight')
boxplot(acceleration ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'acceleration')
boxplot(year ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'year')
boxplot(origin ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'origin')
pairs(auto_data[c(2:4,10)], col=c("blue", "red")[auto_data$mpg01], oma=c(4,4,6,12), pch=c(1,2)[auto_data$mpg01])
par(xpd=TRUE)
legend(0.85, 0.7, as.vector(unique(auto_data$mpg01)), col=c("blue", "red"), pch=1:2)
pairs(auto_data[c(5:8,10)], col=c("blue", "red")[auto_data$mpg01], pch=c(1,2)[auto_data$mpg01])
par(mfrow=c(2,2))
boxplot(cylinders ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'cylinders')
boxplot(displacement ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'displacement')
boxplot(horsepower ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'horsepower')
boxplot(weight ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'weight')
boxplot(acceleration ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'acceleration')
boxplot(year ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'year')
boxplot(origin ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'origin')
pairs(auto_data[c(2:4,10)], col=c("blue", "green")[auto_data$mpg01], oma=c(4,4,6,12), pch=c(1,2)[auto_data$mpg01])
par(xpd=TRUE)
legend(0.85, 0.7, as.vector(unique(auto_data$mpg01)), col=c("blue", "green"), pch=1:2)
pairs(auto_data[c(5:8,10)], col=c("blue", "green")[auto_data$mpg01], pch=c(1,2)[auto_data$mpg01])
par(mfrow=c(2,2))
boxplot(cylinders ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'cylinders')
boxplot(displacement ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'displacement')
boxplot(horsepower ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'horsepower')
boxplot(weight ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'weight')
boxplot(acceleration ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'acceleration')
boxplot(year ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'year')
boxplot(origin ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'origin')
pairs(auto_data[c(2:4,10)], col=c("blue", "red")[auto_data$mpg01], oma=c(4,4,6,12), pch=c(1,2)[auto_data$mpg01])
par(xpd=TRUE)
legend(0.8, 0.7, as.vector(unique(auto_data$mpg01)), col=c("blue", "red"), pch=1:2)
pairs(auto_data[c(5:8,10)], col=c("blue", "red")[auto_data$mpg01], pch=c(1,2)[auto_data$mpg01])
par(mfrow=c(2,2))
boxplot(cylinders ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'cylinders')
boxplot(displacement ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'displacement')
boxplot(horsepower ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'horsepower')
boxplot(weight ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'weight')
boxplot(acceleration ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'acceleration')
boxplot(year ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'year')
boxplot(origin ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'origin')
pairs(auto_data[c(2:4,10)], col=c("blue", "red")[auto_data$mpg01], oma=c(4,4,6,12), pch=c(1,2)[auto_data$mpg01])
par(xpd=TRUE)
legend(0.8, 0.7, as.vector(unique(auto_data$mpg01)), col=c("blue", "red"), pch=1:2)
pairs(auto_data[c(5:8,10)], col=c("blue", "red")[auto_data$mpg01], pch=c(1,2)[auto_data$mpg01])
par(mfrow=c(2,4))
boxplot(cylinders ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'cylinders')
boxplot(displacement ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'displacement')
boxplot(horsepower ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'horsepower')
boxplot(weight ~ mpg01, data = auto_data, xlab = 'mpg01',
ylab = 'weight')
boxplot(acceleration ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'acceleration')
boxplot(year ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'year')
boxplot(origin ~ mpg01, data = auto_data, xlab = 'mpg01', ylab = 'origin')
library(MASS)
auto_lda = lda(mpg01 ~ cylinder+displacement+horsepower+weight, data = auto_train)
library(MASS)
auto_lda = lda(mpg01 ~ cylinders+displacement+horsepower+weight, data = auto_train)
auto_lda_train_pred = predict(auto_lda, auto_train)$class
auto_lda_test_pred = predict(auto_lda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
lda_train_err = calc_class_err(predicted = auto_lda_train_pred, actual = auto_train$mpg01)
lda_train_err
lda_test_err = calc_class_err(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
lda_test_err
library(MASS)
auto_lda = lda(mpg01 ~ acceleration+displacement+horsepower+weight, data = auto_train)
auto_lda_train_pred = predict(auto_lda, auto_train)$class
auto_lda_test_pred = predict(auto_lda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
lda_train_err = calc_class_err(predicted = auto_lda_train_pred, actual = auto_train$mpg01)
lda_train_err
lda_test_err = calc_class_err(predicted = auto_lda_test_pred, actual = auto_test$mpg01)
lda_test_err
auto_qda = qda(mpg01 ~ cylinders+displacement+horsepower+weight, data = auto_train)
auto_qda_train_pred = predict(auto_qda, auto_train)$class
auto_qda_test_pred = predict(auto_qda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
qda_train_err = calc_class_err(predicted = auto_qda_train_pred, actual = auto_train$mpg01)
qda_train_err
qda_test_err = calc_class_err(predicted = auto_qda_test_pred, actual = auto_test$mpg01)
qda_test_err
auto_qda = qda(mpg01 ~ acceleration+displacement+horsepower+weight, data = auto_train)
auto_qda_train_pred = predict(auto_qda, auto_train)$class
auto_qda_test_pred = predict(auto_qda, auto_test)$class
calc_class_err = function(actual, predicted) {
mean(actual != predicted)
}
qda_train_err = calc_class_err(predicted = auto_qda_train_pred, actual = auto_train$mpg01)
qda_train_err
qda_test_err = calc_class_err(predicted = auto_qda_test_pred, actual = auto_test$mpg01)
qda_test_err
